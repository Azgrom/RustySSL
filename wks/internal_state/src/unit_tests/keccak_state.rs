use alloc::format;
use crate::{KeccakState, Chi, Iota, Pi, Rho, Theta, HEIGHT, WIDTH};

// Test constants, based on examples from the Keccak reference
const INITIAL_STATE: [[u64; WIDTH]; HEIGHT] = [
    [0x0000000000000001, 0x0000000000008082, 0x800000000000808A, 0x8000000080008000, 0x000000000000808B],
    [0x0000000080000001, 0x8000000080008081, 0x8000000000008009, 0x000000000000008A, 0x0000000000000088],
    [0x0000000080008009, 0x000000008000000A, 0x000000008000808B, 0x800000000000008B, 0x8000000000008089],
    [0x8000000000008003, 0x8000000000008002, 0x8000000000000080, 0x000000000000800A, 0x800000008000000A],
    [0x8000000080008081, 0x8000000000008080, 0x0000000080000001, 0x8000000080008008, 0x0000000000000001],
];
// Test constants, after theta step
const AFTER_THETA_STATE: [[u64; WIDTH]; HEIGHT] = [
    [0x800000008000811E, 0x800000008000019D, 0x0000000080000195, 0x000000000000011F, 0x8000000080000194],
    [0x0000000100010197, 0x8000000100018117, 0x800000018001819F, 0x000000018001011C, 0x000000018001011E],
    [0x0000000180018180, 0x0000000180010183, 0x0000000180018102, 0x8000000100010102, 0x8000000100018100],
    [0x800000018001009A, 0x800000018001009B, 0x8000000180018019, 0x0000000180010093, 0x8000000100018093],
    [0x8000000100000104, 0x8000000180000105, 0x0000000100008184, 0x800000010000018D, 0x0000000180008184],
];
// Test constants, after rho step
const AFTER_RHO_STATE: [[u64; WIDTH]; HEIGHT] = [
    [0xC0FEE0C00946E0D9, 0x800000000000004A, 0x000000008000000A, 0x0000000080008009, 0x0000000080000001],
    [0x0000000080008009, 0x000000008000000A, 0x000000008000808B, 0x800000000000008B, 0x8000000000008089],
    [0x8000000000008003, 0x8000000000008002, 0x8000000000000080, 0x000000000000800A, 0x800000008000000A],
    [0x8000000080008081, 0x8000000000008080, 0x0000000080000001, 0x8000000080008008, 0x0000000000000001],
    [0x000000000000808B, 0x0000000080000001, 0x8000000080008081, 0x8000000000008080, 0x0000000080000001],
];
// Test constants, after pi step
const AFTER_PI_STATE: [[u64; WIDTH]; HEIGHT] = [
    [0xC0FEE0C00946E0D9, 0x0000000080000001, 0x800000000000808A, 0x000000008000000A, 0x8000000080008008],
    [0x000000008000000A, 0x8000000080008081, 0x0000000080000001, 0x8000000000008080, 0x0000000080000001],
    [0x800000008000000A, 0x8000000000008080, 0x000000008000808B, 0x800000000000008B, 0x000000008000000A],
    [0x8000000000008089, 0x8000000000008003, 0x8000000000008002, 0x8000000000000080, 0x8000000080008008],
    [0x0000000080008009, 0x800000000000808A, 0x8000000080008000, 0x000000000000808B, 0x0000000000000001],
];
// Test constants, after chi step
const AFTER_CHI_STATE: [[u64; WIDTH]; HEIGHT] = [
    [0xC0FEE0C00946E0D9, 0x0000000080000001, 0x800000000000808A, 0x000000008000000A, 0x8000000080008008],
    [0x000000008000000A, 0x8000000080008081, 0x0000000080000001, 0x8000000000008080, 0x0000000080000001],
    [0x800000008000000A, 0x8000000000008080, 0x000000008000808B, 0x800000000000008B, 0x000000008000000A],
    [0x8000000000008089, 0x8000000000008003, 0x8000000000008002, 0x8000000000000080, 0x8000000080008008],
    [0x0000000080008009, 0x800000000000808A, 0x8000000080008000, 0x000000000000808B, 0x0000000000000001],
];
// Test constants, after iota step
const AFTER_IOTA_STATE: [[u64; WIDTH]; HEIGHT] = [
    [0xC0FEE0C00946E0D9, 0x0000000080000001, 0x800000000000808A, 0x000000008000000A, 0x8000000080008008],
    [0x000000008000000A, 0x8000000080008081, 0x0000000080000001, 0x8000000000008080, 0x0000000080000001],
    [0x800000008000000A, 0x8000000000008080, 0x000000008000808B, 0x800000000000008B, 0x000000008000000A],
    [0x8000000000008089, 0x8000000000008003, 0x8000000000008002, 0x8000000000000080, 0x8000000080008008],
    [0x0000000080008009, 0x800000000000808A, 0x8000000080008000, 0x000000000000808B, 0x0000000000000001],
];

#[test]
fn assert_theta_correctness() {
    let mut state = KeccakState::from(INITIAL_STATE);
    state.theta();
    assert_eq!(state, KeccakState::from(AFTER_THETA_STATE));
}

#[test]
fn assert_rho_correctness() {
    let mut state = KeccakState::from(INITIAL_STATE);
    state.rho();
    let string = format!("{state:016X?}");
    assert_eq!(state, KeccakState::from(AFTER_RHO_STATE));
}

#[test]
fn assert_pi_correctness() {
    let mut state = KeccakState::from(INITIAL_STATE);
    state.pi();
    assert_eq!(state, KeccakState::from(AFTER_PI_STATE));
}

#[test]
fn assert_chi_correctness() {
    let mut state = KeccakState::from(INITIAL_STATE);
    state.chi();
    assert_eq!(state, KeccakState::from(AFTER_CHI_STATE));
}
